"""
Script to update the file paths in a dataset .csv, useful if the .csv
is generated on one computer and needs to be ported to another.
"""
import logging
import os
import re
from argparse import ArgumentParser, Namespace
from typing import List

import pandas as pd
import numpy as np
import os.path as path

log = logging.getLogger(__name__)


def update_paths(df: pd.DataFrame, images_pth: List[str]) -> pd.DataFrame:
    images_idx = list()
    regex = re.compile(r'.*_(?P<uuid>.+)\.(png|jpg)')
    for image_pth in images_pth:
        if not path.isdir(image_pth):
            raise NotADirectoryError(f'{image_pth} is not a directory.')

        for f in os.listdir(image_pth):
            m = regex.match(f)

            if m:
                images_idx.append(
                    {'eventId': m.group('uuid'),
                     'filepath': path.abspath(path.join(image_pth, f))})

    images_df = pd.DataFrame(images_idx)
    log.info(f'Registered {len(images_idx)} images in {len(images_pth)} '
             f'directories.')

    # merge and filter based on eventId
    df = df.drop(columns=['filepath'])
    df = df.merge(images_df, left_on='eventId', right_on='eventId')
    log.info(f'Updated file paths for {len(df)} samples.')

    return df


def main(args: Namespace):
    df = pd.read_csv(args.input_csv)
    df = update_paths(df, args.images)

    df.to_csv(args.output, index=False)


if __name__ == '__main__':
    from ..utils.logging import setup_logger
    parser = ArgumentParser()

    parser.add_argument('input_csv', type=str,
                        help='Name of unsplit or previously split dataset '
                             'csv generated by preprocess_csv.')
    parser.add_argument('-o', '--output', type=str,
                        default='output_updated.csv',
                        help='Name of split dataset csv.')
    parser.add_argument('-i', '--images', nargs='+', help='Path to images.')

    args = parser.parse_args()

    setup_logger()
    main(args)
